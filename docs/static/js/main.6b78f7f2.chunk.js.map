{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCat","useState","inputVal","setInputVal","onSubmit","e","preventDefault","trim","length","prev","type","value","onChange","target","getGif","category","a","API_KEY","encodeURI","fetch","res","json","data","gifs","map","item","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","cat","element","ReactDOM","render","document","getElementById"],"mappings":"mMA8BeA,EA3BK,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACFC,mBAAS,IADP,mBAC3BC,EAD2B,KACjBC,EADiB,KAgBlC,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAASK,OAAOC,OAAS,IAC3BR,GAAO,SAACS,GAAD,OAAWP,GAAX,mBAAwBO,OAC/BN,EAAY,MAKd,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAUU,SAfd,SAACP,GACzBF,EAAYE,EAAEQ,OAAOF,a,+BCPZG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACsCC,UACxDH,GAFkB,+DAKFI,MAAMF,GALJ,cAKdG,EALc,gBAMGA,EAAIC,OANP,uBAMZC,EANY,EAMZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZC,IAAKH,EAAKI,OAAOC,iBAAiBF,QAZlB,kBAgBbL,GAhBa,4CAAH,sDCWJQ,EATK,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,sBAAKI,UAAU,yCAAf,UACE,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCmBKQ,EAnBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRzB,EAAOC,GAAUyB,MAAK,SAACC,GAAD,OACpBH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAGZ,CAACrB,IAEGsB,EDZ2BK,CAAa3B,GAAjCc,EADkB,EACxBP,KAAcc,EADU,EACVA,QAEtB,OACE,qCACE,6BAAKrB,IACJqB,GACC,mBAAGJ,UAAU,mCAAb,yBAGF,qBAAKA,UAAU,YAAf,SACGH,EAAOL,KAAI,SAACmB,GACX,OAAOA,EAAIhB,MAAMnB,OAAS,GAAK,cAAC,EAAD,eAA8BmC,GAAZA,EAAIjB,aEUhDkB,EAxBM,WACnB,IADyB,EAEH3C,mBADH,CAAC,cADK,mBAElB4C,EAFkB,KAEb7C,EAFa,KASzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,OAAQA,IACrB,uBAEA,6BACG6C,EAAIrB,KAAI,SAACsB,GAAD,OACP,cAAC,EAAD,CAAuB/B,SAAU+B,GAAnBA,Y,MCfxBC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.6b78f7f2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCat }) => {\n  const [inputVal, setInputVal] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputVal(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputVal.trim().length > 2) {\n      setCat((prev) => [inputVal, ...prev]);\n      setInputVal(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputVal} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCat: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGif = async (category) => {\n  const API_KEY = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=DmOUJlma7cswNjp6tTTZoKhbD03MVGKd`;\n\n  const res = await fetch(API_KEY);\n  const { data } = await res.json();\n\n  const gifs = data.map((item) => {\n    return {\n      id: item.id,\n      title: item.title,\n      url: item.images.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from \"react\";\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && (\n        <p className=\"animate__animated animate__flash\">Cargando...</p>\n      )}\n\n      <div className=\"card-grid\">\n        {images.map((img) => {\n          return img.title.length > 0 && <GifGridItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\n\nimport { getGif } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGif(category).then((imgs) =>\n      setState({\n        data: imgs,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\n\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\nconst GifExpertApp = () => {\n  const categories = [\"One Punch\"];\n  const [cat, setCat] = useState(categories);\n\n  //   const handleAdd = () => {\n  //     const newElement = \"NewElement\";\n  //     setCat([...cat, newElement]);\n  //   };\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCat={setCat} />\n      <hr />\n\n      <ol>\n        {cat.map((element) => (\n          <GifGrid key={element} category={element} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}